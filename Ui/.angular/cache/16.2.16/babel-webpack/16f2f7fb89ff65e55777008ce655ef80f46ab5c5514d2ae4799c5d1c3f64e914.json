{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth';\n  }\n  // Register user\n  register(registerRequest) {\n    console.log('üîê [AUTH SERVICE] Step 1: Register API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/register`);\n    console.log('üîê [AUTH SERVICE] Step 3: Request payload:', registerRequest);\n    return this.http.post(`${this.apiUrl}/register`, registerRequest);\n  }\n  // Login user\n  login(loginRequest) {\n    console.log('üîê [AUTH SERVICE] Step 1: Login API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/login`);\n    console.log('üîê [AUTH SERVICE] Step 3: Request payload:', loginRequest);\n    return this.http.post(`${this.apiUrl}/login`, loginRequest);\n  }\n  // Logout user\n  logout(usernameOrEmail) {\n    console.log('üîê [AUTH SERVICE] Step 1: Logout API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`);\n    console.log('üîê [AUTH SERVICE] Step 3: Logging out user:', usernameOrEmail);\n    return this.http.post(`${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`, {});\n  }\n  // Forget password\n  forgetPassword(forgetPasswordRequest) {\n    return this.http.post(`${this.apiUrl}/forget-password`, forgetPasswordRequest);\n  }\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest) {\n    return this.http.post(`${this.apiUrl}/verify-otp`, verifyOtpRequest);\n  }\n  // Change password\n  changePassword(changePasswordRequest) {\n    return this.http.post(`${this.apiUrl}/change-password`, changePasswordRequest);\n  }\n  // Test email\n  testEmail(email) {\n    return this.http.post(`${this.apiUrl}/test-email?email=${email}`, {});\n  }\n  // Store user data in localStorage\n  setUserData(userData) {\n    console.log('üîê [AUTH SERVICE] Step 1: Storing user data in localStorage');\n    console.log('üîê [AUTH SERVICE] Step 2: User data to store:', userData);\n    localStorage.setItem('userData', JSON.stringify(userData));\n    console.log('üîê [AUTH SERVICE] Step 3: User data stored successfully');\n  }\n  // Get user data from localStorage\n  getUserData() {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n  // Clear user data from localStorage\n  clearUserData() {\n    localStorage.removeItem('userData');\n  }\n  // Check if user is logged in\n  isLoggedIn() {\n    return this.getUserData() !== null;\n  }\n  // Store redirect URL\n  setRedirectUrl(url) {\n    localStorage.setItem('redirectUrl', url);\n  }\n  // Get redirect URL\n  getRedirectUrl() {\n    return localStorage.getItem('redirectUrl');\n  }\n  // Clear redirect URL\n  clearRedirectUrl() {\n    localStorage.removeItem('redirectUrl');\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","http","apiUrl","register","registerRequest","console","log","post","login","loginRequest","logout","usernameOrEmail","forgetPassword","forgetPasswordRequest","verifyOtpAndResetPassword","verifyOtpRequest","changePassword","changePasswordRequest","testEmail","email","setUserData","userData","localStorage","setItem","JSON","stringify","getUserData","getItem","parse","clearUserData","removeItem","isLoggedIn","setRedirectUrl","url","getRedirectUrl","clearRedirectUrl","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse, \n  ForgetPasswordRequest, \n  VerifyOtpRequest, \n  ChangePasswordRequest, \n  ApiResponse \n} from '../models/auth.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api/auth';\n\n  constructor(private http: HttpClient) { }\n\n  // Register user\n  register(registerRequest: RegisterRequest): Observable<ApiResponse<AuthResponse>> {\n    console.log('üîê [AUTH SERVICE] Step 1: Register API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/register`);\n    console.log('üîê [AUTH SERVICE] Step 3: Request payload:', registerRequest);\n    \n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/register`, registerRequest);\n  }\n\n  // Login user\n  login(loginRequest: LoginRequest): Observable<ApiResponse<AuthResponse>> {\n    console.log('üîê [AUTH SERVICE] Step 1: Login API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/login`);\n    console.log('üîê [AUTH SERVICE] Step 3: Request payload:', loginRequest);\n    \n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/login`, loginRequest);\n  }\n\n  // Logout user\n  logout(usernameOrEmail: string): Observable<ApiResponse<string>> {\n    console.log('üîê [AUTH SERVICE] Step 1: Logout API call initiated');\n    console.log('üîê [AUTH SERVICE] Step 2: Making POST request to:', `${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`);\n    console.log('üîê [AUTH SERVICE] Step 3: Logging out user:', usernameOrEmail);\n    \n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`, {});\n  }\n\n  // Forget password\n  forgetPassword(forgetPasswordRequest: ForgetPasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/forget-password`, forgetPasswordRequest);\n  }\n\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest: VerifyOtpRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/verify-otp`, verifyOtpRequest);\n  }\n\n  // Change password\n  changePassword(changePasswordRequest: ChangePasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/change-password`, changePasswordRequest);\n  }\n\n  // Test email\n  testEmail(email: string): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/test-email?email=${email}`, {});\n  }\n\n  // Store user data in localStorage\n  setUserData(userData: AuthResponse): void {\n    console.log('üîê [AUTH SERVICE] Step 1: Storing user data in localStorage');\n    console.log('üîê [AUTH SERVICE] Step 2: User data to store:', userData);\n    localStorage.setItem('userData', JSON.stringify(userData));\n    console.log('üîê [AUTH SERVICE] Step 3: User data stored successfully');\n  }\n\n  // Get user data from localStorage\n  getUserData(): AuthResponse | null {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  // Clear user data from localStorage\n  clearUserData(): void {\n    localStorage.removeItem('userData');\n  }\n\n  // Check if user is logged in\n  isLoggedIn(): boolean {\n    return this.getUserData() !== null;\n  }\n\n  // Store redirect URL\n  setRedirectUrl(url: string): void {\n    localStorage.setItem('redirectUrl', url);\n  }\n\n  // Get redirect URL\n  getRedirectUrl(): string | null {\n    return localStorage.getItem('redirectUrl');\n  }\n\n  // Clear redirect URL\n  clearRedirectUrl(): void {\n    localStorage.removeItem('redirectUrl');\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}