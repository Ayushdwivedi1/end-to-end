{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    console.log('AuthGuard checking access to:', state.url);\n    const isLoggedIn = this.authService.isLoggedIn();\n    console.log('User logged in status:', isLoggedIn);\n    if (isLoggedIn) {\n      console.log('Access granted to:', state.url);\n      return true;\n    } else {\n      console.log('Access denied to:', state.url, '- redirecting to login');\n      // Store the attempted URL for redirecting after login\n      this.authService.setRedirectUrl(state.url);\n      // Clear any existing user data to ensure clean state\n      this.authService.completeLogout();\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","console","log","url","isLoggedIn","setRedirectUrl","completeLogout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    console.log('AuthGuard checking access to:', state.url);\n    const isLoggedIn = this.authService.isLoggedIn();\n    console.log('User logged in status:', isLoggedIn);\n    \n    if (isLoggedIn) {\n      console.log('Access granted to:', state.url);\n      return true;\n    } else {\n      console.log('Access denied to:', state.url, '- redirecting to login');\n      // Store the attempted URL for redirecting after login\n      this.authService.setRedirectUrl(state.url);\n      // Clear any existing user data to ensure clean state\n      this.authService.completeLogout();\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n} "],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnEC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,KAAK,CAACG,GAAG,CAAC;IACvD,MAAMC,UAAU,GAAG,IAAI,CAACR,WAAW,CAACQ,UAAU,EAAE;IAChDH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,UAAU,CAAC;IAEjD,IAAIA,UAAU,EAAE;MACdH,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,KAAK,CAACG,GAAG,CAAC;MAC5C,OAAO,IAAI;KACZ,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,KAAK,CAACG,GAAG,EAAE,wBAAwB,CAAC;MACrE;MACA,IAAI,CAACP,WAAW,CAACS,cAAc,CAACL,KAAK,CAACG,GAAG,CAAC;MAC1C;MACA,IAAI,CAACP,WAAW,CAACU,cAAc,EAAE;MACjC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;;uBAxBWb,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATnB,SAAS;MAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}