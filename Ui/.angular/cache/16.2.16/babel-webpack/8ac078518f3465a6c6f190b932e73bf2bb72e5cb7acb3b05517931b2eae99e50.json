{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth';\n  }\n  // Register user\n  register(registerRequest) {\n    return this.http.post(`${this.apiUrl}/register`, registerRequest);\n  }\n  // Login user\n  login(loginRequest) {\n    return this.http.post(`${this.apiUrl}/login`, loginRequest);\n  }\n  // Logout user\n  logout(usernameOrEmail) {\n    return this.http.post(`${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`, {});\n  }\n  // Complete logout process (clears local data)\n  completeLogout() {\n    this.clearUserData();\n    this.clearRedirectUrl();\n  }\n  // Forget password\n  forgetPassword(forgetPasswordRequest) {\n    return this.http.post(`${this.apiUrl}/forget-password`, forgetPasswordRequest);\n  }\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest) {\n    return this.http.post(`${this.apiUrl}/verify-otp`, verifyOtpRequest);\n  }\n  // Change password\n  changePassword(changePasswordRequest) {\n    return this.http.post(`${this.apiUrl}/change-password`, changePasswordRequest);\n  }\n  // Test email\n  testEmail(email) {\n    return this.http.post(`${this.apiUrl}/test-email?email=${email}`, {});\n  }\n  // Store user data in localStorage\n  setUserData(userData) {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n  // Get user data from localStorage\n  getUserData() {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n  // Clear user data from localStorage\n  clearUserData() {\n    localStorage.removeItem('userData');\n    // Also clear redirect URL when clearing user data\n    this.clearRedirectUrl();\n  }\n  // Check if user is logged in\n  isLoggedIn() {\n    const userData = this.getUserData();\n    console.log('isLoggedIn check - userData:', userData);\n    return userData !== null;\n  }\n  // Store redirect URL\n  setRedirectUrl(url) {\n    localStorage.setItem('redirectUrl', url);\n  }\n  // Get redirect URL\n  getRedirectUrl() {\n    return localStorage.getItem('redirectUrl');\n  }\n  // Clear redirect URL\n  clearRedirectUrl() {\n    localStorage.removeItem('redirectUrl');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","http","apiUrl","register","registerRequest","post","login","loginRequest","logout","usernameOrEmail","completeLogout","clearUserData","clearRedirectUrl","forgetPassword","forgetPasswordRequest","verifyOtpAndResetPassword","verifyOtpRequest","changePassword","changePasswordRequest","testEmail","email","setUserData","userData","localStorage","setItem","JSON","stringify","getUserData","getItem","parse","removeItem","isLoggedIn","console","log","setRedirectUrl","url","getRedirectUrl","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse, \n  ForgetPasswordRequest, \n  VerifyOtpRequest, \n  ChangePasswordRequest, \n  ApiResponse \n} from '../models/auth.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api/auth';\n\n  constructor(private http: HttpClient) { }\n\n  // Register user\n  register(registerRequest: RegisterRequest): Observable<ApiResponse<AuthResponse>> {\n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/register`, registerRequest);\n  }\n\n  // Login user\n  login(loginRequest: LoginRequest): Observable<ApiResponse<AuthResponse>> {\n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/login`, loginRequest);\n  }\n\n  // Logout user\n  logout(usernameOrEmail: string): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/logout?usernameOrEmail=${usernameOrEmail}`, {});\n  }\n\n  // Complete logout process (clears local data)\n  completeLogout(): void {\n    this.clearUserData();\n    this.clearRedirectUrl();\n  }\n\n  // Forget password\n  forgetPassword(forgetPasswordRequest: ForgetPasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/forget-password`, forgetPasswordRequest);\n  }\n\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest: VerifyOtpRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/verify-otp`, verifyOtpRequest);\n  }\n\n  // Change password\n  changePassword(changePasswordRequest: ChangePasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/change-password`, changePasswordRequest);\n  }\n\n  // Test email\n  testEmail(email: string): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/test-email?email=${email}`, {});\n  }\n\n  // Store user data in localStorage\n  setUserData(userData: AuthResponse): void {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n\n  // Get user data from localStorage\n  getUserData(): AuthResponse | null {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  // Clear user data from localStorage\n  clearUserData(): void {\n    localStorage.removeItem('userData');\n    // Also clear redirect URL when clearing user data\n    this.clearRedirectUrl();\n  }\n\n  // Check if user is logged in\n  isLoggedIn(): boolean {\n    const userData = this.getUserData();\n    console.log('isLoggedIn check - userData:', userData);\n    return userData !== null;\n  }\n\n  // Store redirect URL\n  setRedirectUrl(url: string): void {\n    localStorage.setItem('redirectUrl', url);\n  }\n\n  // Get redirect URL\n  getRedirectUrl(): string | null {\n    return localStorage.getItem('redirectUrl');\n  }\n\n  // Clear redirect URL\n  clearRedirectUrl(): void {\n    localStorage.removeItem('redirectUrl');\n  }\n} "],"mappings":";;AAgBA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;EAET;EAExC;EACAC,QAAQA,CAACC,eAAgC;IACvC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA4B,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEE,eAAe,CAAC;EAC9F;EAEA;EACAE,KAAKA,CAACC,YAA0B;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACI,IAAI,CAA4B,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEK,YAAY,CAAC;EACxF;EAEA;EACAC,MAAMA,CAACC,eAAuB;IAC5B,OAAO,IAAI,CAACR,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,2BAA2BO,eAAe,EAAE,EAAE,EAAE,CAAC;EAC5G;EAEA;EACAC,cAAcA,CAAA;IACZ,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,gBAAgB,EAAE;EACzB;EAEA;EACAC,cAAcA,CAACC,qBAA4C;IACzD,OAAO,IAAI,CAACb,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,kBAAkB,EAAEY,qBAAqB,CAAC;EACrG;EAEA;EACAC,yBAAyBA,CAACC,gBAAkC;IAC1D,OAAO,IAAI,CAACf,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,aAAa,EAAEc,gBAAgB,CAAC;EAC3F;EAEA;EACAC,cAAcA,CAACC,qBAA4C;IACzD,OAAO,IAAI,CAACjB,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,kBAAkB,EAAEgB,qBAAqB,CAAC;EACrG;EAEA;EACAC,SAASA,CAACC,KAAa;IACrB,OAAO,IAAI,CAACnB,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,qBAAqBkB,KAAK,EAAE,EAAE,EAAE,CAAC;EAC5F;EAEA;EACAC,WAAWA,CAACC,QAAsB;IAChCC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC5D;EAEA;EACAK,WAAWA,CAAA;IACT,MAAML,QAAQ,GAAGC,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC;IACjD,OAAON,QAAQ,GAAGG,IAAI,CAACI,KAAK,CAACP,QAAQ,CAAC,GAAG,IAAI;EAC/C;EAEA;EACAX,aAAaA,CAAA;IACXY,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC;IACnC;IACA,IAAI,CAAClB,gBAAgB,EAAE;EACzB;EAEA;EACAmB,UAAUA,CAAA;IACR,MAAMT,QAAQ,GAAG,IAAI,CAACK,WAAW,EAAE;IACnCK,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEX,QAAQ,CAAC;IACrD,OAAOA,QAAQ,KAAK,IAAI;EAC1B;EAEA;EACAY,cAAcA,CAACC,GAAW;IACxBZ,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEW,GAAG,CAAC;EAC1C;EAEA;EACAC,cAAcA,CAAA;IACZ,OAAOb,YAAY,CAACK,OAAO,CAAC,aAAa,CAAC;EAC5C;EAEA;EACAhB,gBAAgBA,CAAA;IACdW,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;EACxC;;;uBApFW/B,WAAW,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXzC,WAAW;MAAA0C,OAAA,EAAX1C,WAAW,CAAA2C,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}