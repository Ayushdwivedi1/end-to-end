{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nexport let ChatComponent = class ChatComponent {\n  constructor(authService, aiChatService) {\n    this.authService = authService;\n    this.aiChatService = aiChatService;\n    this.messages = [];\n    this.newMessage = '';\n    this.userData = null;\n    this.isTyping = false;\n    this.isListening = false;\n    this.isSpeaking = false;\n    this.recognition = null;\n    this.synthesis = null;\n    this.currentConversationId = null;\n    this.isLoading = false;\n    // Voice customization settings\n    this.voiceSettings = {\n      rate: 0.9,\n      pitch: 1.05,\n      volume: 0.95,\n      voiceName: '',\n      language: 'auto' // Language preference\n    };\n\n    this.availableVoices = [];\n    this.showVoiceSettings = false;\n    // Make Math available in template\n    this.Math = Math;\n  }\n  ngOnInit() {\n    this.userData = this.authService.getUserData();\n    this.addWelcomeMessage();\n    this.initializeSpeech();\n    // Load voices when they become available\n    if (this.synthesis) {\n      this.synthesis.onvoiceschanged = () => {\n        this.availableVoices = this.synthesis?.getVoices() || [];\n        console.log('Voices loaded:', this.availableVoices.length);\n        this.loadVoiceSettings();\n      };\n    }\n  }\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  addWelcomeMessage() {\n    this.messages.push({\n      id: 1,\n      text: `Namaste ${this.userData?.firstName || this.userData?.username}! Main aapka AI assistant hoon. Aapko kya help chahiye aaj?`,\n      sender: 'ai',\n      timestamp: new Date()\n    });\n  }\n  sendMessage() {\n    if (this.newMessage.trim() && !this.isTyping && !this.isLoading) {\n      const userMessage = {\n        id: this.messages.length + 1,\n        text: this.newMessage.trim(),\n        sender: 'user',\n        timestamp: new Date()\n      };\n      this.messages.push(userMessage);\n      const userInput = this.newMessage;\n      this.newMessage = '';\n      this.isTyping = true;\n      this.isLoading = true;\n      // Add loading message\n      const loadingMessage = {\n        id: this.messages.length + 1,\n        text: 'Thinking...',\n        sender: 'ai',\n        timestamp: new Date(),\n        isLoading: true\n      };\n      this.messages.push(loadingMessage);\n      // Send to AI backend\n      const request = {\n        question: userInput,\n        userId: this.userData?.id?.toString() || this.userData?.username,\n        conversationId: this.currentConversationId || undefined\n      };\n      this.aiChatService.sendQuestion(request).subscribe({\n        next: response => {\n          // Remove loading message\n          this.messages = this.messages.filter(msg => !msg.isLoading);\n          // Store conversation ID for future messages\n          this.currentConversationId = response.conversationId?.toString() || null;\n          // Add AI response\n          const aiMessage = {\n            id: this.messages.length + 1,\n            text: response.response,\n            sender: 'ai',\n            timestamp: new Date(),\n            aiResponseId: response.conversationId?.toString() || '',\n            conversationId: response.conversationId?.toString() || ''\n          };\n          this.messages.push(aiMessage);\n          this.isTyping = false;\n          this.isLoading = false;\n        },\n        error: error => {\n          console.error('Error getting AI response:', error);\n          // Remove loading message\n          this.messages = this.messages.filter(msg => !msg.isLoading);\n          // Add error message\n          const errorMessage = {\n            id: this.messages.length + 1,\n            text: 'Sorry, main abhi aapki help nahi kar pa raha hoon. Please try again later.',\n            sender: 'ai',\n            timestamp: new Date()\n          };\n          this.messages.push(errorMessage);\n          this.isTyping = false;\n          this.isLoading = false;\n        }\n      });\n    }\n  }\n  onKeyPress(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n  scrollToBottom() {\n    try {\n      this.chatContainer.nativeElement.scrollTop = this.chatContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n  clearChat() {\n    this.messages = [];\n    this.currentConversationId = null;\n    this.addWelcomeMessage();\n  }\n  focusInput() {\n    setTimeout(() => {\n      this.messageInput.nativeElement.focus();\n    }, 100);\n  }\n  submitFeedback(questionId, conversationId, rating, feedback) {\n    const feedbackRequest = {\n      conversationId: conversationId,\n      questionId: questionId,\n      rating: rating,\n      feedback: feedback\n    };\n    this.aiChatService.submitFeedback(feedbackRequest).subscribe({\n      next: response => {\n        console.log('Feedback submitted successfully:', response);\n        // Show a brief success message\n        this.showFeedbackMessage('Thank you for your feedback!');\n      },\n      error: error => {\n        console.error('Error submitting feedback:', error);\n        this.showFeedbackMessage('Failed to submit feedback. Please try again.');\n      }\n    });\n  }\n  showFeedbackMessage(message) {\n    // Create a temporary feedback message\n    const feedbackMessage = {\n      id: this.messages.length + 1,\n      text: message,\n      sender: 'ai',\n      timestamp: new Date()\n    };\n    this.messages.push(feedbackMessage);\n    // Remove the feedback message after 3 seconds\n    setTimeout(() => {\n      this.messages = this.messages.filter(msg => msg.id !== feedbackMessage.id);\n    }, 3000);\n  }\n  initializeSpeech() {\n    // Initialize speech synthesis\n    if ('speechSynthesis' in window) {\n      this.synthesis = window.speechSynthesis;\n    }\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      this.recognition = new window.webkitSpeechRecognition();\n      this.recognition.continuous = false;\n      this.recognition.interimResults = false;\n      this.recognition.lang = 'hi-IN'; // Hindi (India)\n      this.recognition.maxAlternatives = 3; // Get multiple recognition alternatives\n      this.recognition.onstart = () => {\n        this.isListening = true;\n      };\n      this.recognition.onresult = event => {\n        const transcript = event.results[0][0].transcript;\n        // Convert Hindi speech to English text\n        const englishText = this.convertHindiToEnglish(transcript);\n        this.newMessage = englishText;\n        this.isListening = false;\n      };\n      this.recognition.onerror = event => {\n        console.error('Speech recognition error:', event.error);\n        this.isListening = false;\n      };\n      this.recognition.onend = () => {\n        this.isListening = false;\n      };\n    }\n  }\n  startListening() {\n    if (this.recognition && !this.isListening) {\n      try {\n        this.recognition.start();\n      } catch (error) {\n        console.error('Error starting speech recognition:', error);\n        this.isListening = false;\n      }\n    }\n  }\n  stopListening() {\n    if (this.recognition && this.isListening) {\n      try {\n        this.recognition.stop();\n      } catch (error) {\n        console.error('Error stopping speech recognition:', error);\n      }\n    }\n  }\n  speakMessage(text) {\n    if (this.synthesis) {\n      try {\n        // Stop any current speech\n        this.synthesis.cancel();\n        // Process text for more natural speech\n        const processedText = this.processTextForSpeech(text);\n        const utterance = new SpeechSynthesisUtterance(processedText);\n        // Enhanced voice selection for more genuine AI voice\n        const voices = this.synthesis.getVoices();\n        const preferredVoices = [\n        // Premium Neural voices for best quality\n        'hi-IN-NeerjaNeural', 'en-IN-NeerjaNeural', 'hi-IN-MadhurNeural', 'en-IN-PrabhatNeural', 'en-US-JennyNeural', 'en-US-GuyNeural', 'en-GB-SoniaNeural', 'en-GB-RyanNeural',\n        // Fallback voices\n        'hi-IN', 'en-IN', 'en-US', 'en-GB' // British English\n        ];\n        // Find the best available voice with enhanced selection\n        let selectedVoice = this.selectBestVoice(voices, preferredVoices);\n        if (selectedVoice) {\n          utterance.voice = selectedVoice;\n          console.log('Selected voice:', selectedVoice.name, 'Language:', selectedVoice.lang);\n        }\n        // Apply user voice settings for personalized AI voice\n        utterance.rate = this.voiceSettings.rate;\n        utterance.pitch = this.voiceSettings.pitch;\n        utterance.volume = this.voiceSettings.volume;\n        utterance.lang = this.voiceSettings.language === 'auto' ? this.detectLanguage(text) : this.voiceSettings.language;\n        // Add natural pauses and emphasis\n        this.addSpeechEvents(utterance);\n        this.synthesis.speak(utterance);\n      } catch (error) {\n        console.error('Error with speech synthesis:', error);\n        this.isSpeaking = false;\n      }\n    }\n  }\n  processTextForSpeech(text) {\n    // Add natural pauses and emphasis for more genuine speech\n    let processedText = text;\n    // Add pauses after sentences\n    processedText = processedText.replace(/\\./g, '... ');\n    processedText = processedText.replace(/\\!/g, '!... ');\n    processedText = processedText.replace(/\\?/g, '?... ');\n    // Add emphasis to important words\n    processedText = processedText.replace(/\\b(Ayush Dwivedi|Alka Dwivedi|Anshi Shukla|Vijay Kumar Dwivedi|Shreya Dwivedi)\\b/gi, '<emphasis level=\"strong\">$1</emphasis>');\n    // Add natural pauses for better flow\n    processedText = processedText.replace(/,/g, ',... ');\n    processedText = processedText.replace(/;/g, ';... ');\n    // Optimize for Hindi-English mixed speech\n    if (this.containsHindi(text)) {\n      processedText = this.optimizeHindiEnglishSpeech(processedText);\n    }\n    return processedText;\n  }\n  selectBestVoice(voices, preferredVoices) {\n    // First, try to use user's selected voice\n    if (this.voiceSettings.voiceName) {\n      const userVoice = voices.find(v => v.name === this.voiceSettings.voiceName);\n      if (userVoice) {\n        return userVoice;\n      }\n    }\n    // Then try to find exact matches from preferred voices\n    for (const voiceName of preferredVoices) {\n      const voice = voices.find(v => v.name === voiceName);\n      if (voice) {\n        return voice;\n      }\n    }\n    // If no exact match, find best available voice by language\n    const languagePreferences = ['hi-IN', 'en-IN', 'en-US', 'en-GB'];\n    for (const lang of languagePreferences) {\n      const voice = voices.find(v => v.lang.startsWith(lang));\n      if (voice) {\n        return voice;\n      }\n    }\n    // Fallback to any available voice\n    return voices.length > 0 ? voices[0] : null;\n  }\n  detectLanguage(text) {\n    // Simple language detection for Hindi vs English\n    const hindiWords = ['है', 'में', 'आप', 'मुझे', 'क्या', 'कैसे', 'कहाँ', 'कब', 'कौन', 'मदद', 'समस्या', 'समाधान'];\n    const hasHindi = hindiWords.some(word => text.includes(word));\n    if (hasHindi) {\n      return 'hi-IN';\n    } else {\n      return 'en-US';\n    }\n  }\n  containsHindi(text) {\n    const hindiPattern = /[\\u0900-\\u097F]/;\n    return hindiPattern.test(text);\n  }\n  optimizeHindiEnglishSpeech(text) {\n    // Add natural pauses between Hindi and English words\n    text = text.replace(/([a-zA-Z]+)([हैमेंआपमुझेक्याकैसेकहाँकबकौन])/g, '$1... $2');\n    text = text.replace(/([हैमेंआपमुझेक्याकैसेकहाँकबकौन])([a-zA-Z]+)/g, '$1... $2');\n    return text;\n  }\n  addSpeechEvents(utterance) {\n    utterance.onstart = () => {\n      this.isSpeaking = true;\n      console.log('AI started speaking');\n    };\n    utterance.onend = () => {\n      this.isSpeaking = false;\n      console.log('AI finished speaking');\n    };\n    utterance.onpause = () => {\n      console.log('AI speech paused');\n    };\n    utterance.onresume = () => {\n      console.log('AI speech resumed');\n    };\n    utterance.onerror = event => {\n      console.error('Speech synthesis error:', event);\n      this.isSpeaking = false;\n    };\n  }\n  stopSpeaking() {\n    if (this.synthesis) {\n      try {\n        this.synthesis.cancel();\n        this.isSpeaking = false;\n      } catch (error) {\n        console.error('Error stopping speech synthesis:', error);\n      }\n    }\n  }\n  toggleSpeech() {\n    if (this.isSpeaking) {\n      this.stopSpeaking();\n    } else {\n      // Speak the last AI message\n      const lastAiMessage = this.messages.filter(msg => msg.sender === 'ai').pop();\n      if (lastAiMessage) {\n        this.speakMessage(lastAiMessage.text);\n      }\n    }\n  }\n  getAvailableVoices() {\n    if (this.synthesis) {\n      const voices = this.synthesis.getVoices();\n      console.log('Available voices:');\n      voices.forEach(voice => {\n        console.log(`- ${voice.name} (${voice.lang})`);\n      });\n    }\n  }\n  convertHindiToEnglish(hindiText) {\n    // Common Hindi to English word mappings\n    const hindiToEnglish = {\n      // Basic words\n      'नमस्ते': 'namaste',\n      'है': 'hai',\n      'में': 'main',\n      'आप': 'aap',\n      'मुझे': 'mujhe',\n      'क्या': 'kya',\n      'कैसे': 'kaise',\n      'कहाँ': 'kahan',\n      'कब': 'kab',\n      'कौन': 'kaun',\n      // Common phrases\n      'मदद': 'help',\n      'समस्या': 'problem',\n      'समाधान': 'solution',\n      'जानकारी': 'information',\n      'प्रश्न': 'question',\n      'उत्तर': 'answer',\n      'सहायता': 'assistance',\n      'सेवा': 'service',\n      // Actions\n      'करना': 'karna',\n      'जाना': 'jana',\n      'आना': 'aana',\n      'देखना': 'dekhna',\n      'सुनना': 'sunna',\n      'बोलना': 'bolna',\n      'समझना': 'samajhna',\n      'सोचना': 'sochna',\n      // Time related\n      'आज': 'aaj',\n      'कल': 'kal',\n      'परसों': 'parson',\n      'सुबह': 'subah',\n      'शाम': 'sham',\n      'रात': 'raat',\n      'दिन': 'din',\n      // Numbers\n      'एक': 'ek',\n      'दो': 'do',\n      'तीन': 'teen',\n      'चार': 'char',\n      'पांच': 'paanch',\n      'छह': 'cheh',\n      'सात': 'saat',\n      'आठ': 'aath',\n      'नौ': 'nau',\n      'दस': 'das',\n      // Common expressions\n      'धन्यवाद': 'thank you',\n      'कृपया': 'please',\n      'माफ़ करें': 'sorry',\n      'ठीक है': 'okay',\n      'हाँ': 'yes',\n      'नहीं': 'no',\n      'बहुत': 'bahut',\n      'अच्छा': 'accha',\n      'बुरा': 'bura',\n      // Technology terms\n      'कंप्यूटर': 'computer',\n      'मोबाइल': 'mobile',\n      'इंटरनेट': 'internet',\n      'वेबसाइट': 'website',\n      'एप्लिकेशन': 'application',\n      'सिस्टम': 'system',\n      'डेटा': 'data',\n      'फ़ाइल': 'file',\n      // Business terms\n      'कंपनी': 'company',\n      'कार्यालय': 'office',\n      'कार्य': 'work',\n      'पैसा': 'money',\n      'लेनदेन': 'transaction',\n      'खाता': 'account',\n      'बैंक': 'bank',\n      // Family and relationships\n      'परिवार': 'family',\n      'दोस्त': 'friend',\n      'भाई': 'bhai',\n      'बहन': 'behen',\n      'माता': 'mata',\n      'पिता': 'pita',\n      'बेटा': 'beta',\n      'बेटी': 'beti'\n    };\n    let englishText = hindiText;\n    // Convert Hindi words to English\n    for (const [hindi, english] of Object.entries(hindiToEnglish)) {\n      const regex = new RegExp(hindi, 'gi');\n      englishText = englishText.replace(regex, english);\n    }\n    // Handle common Hindi patterns\n    englishText = englishText.replace(/हूँ/g, 'hoon').replace(/हैं/g, 'hain').replace(/था/g, 'tha').replace(/थी/g, 'thi').replace(/थे/g, 'the').replace(/रहा/g, 'raha').replace(/रही/g, 'rahi').replace(/रहे/g, 'rahe').replace(/कर/g, 'kar').replace(/की/g, 'ki').replace(/का/g, 'ka').replace(/के/g, 'ke').replace(/को/g, 'ko').replace(/से/g, 'se').replace(/में/g, 'main').replace(/पर/g, 'par').replace(/तक/g, 'tak').replace(/साथ/g, 'saath').replace(/बिना/g, 'bina').replace(/लिए/g, 'liye').replace(/द्वारा/g, 'dwara').replace(/के लिए/g, 'ke liye').replace(/की तरह/g, 'ki tarah').replace(/के बारे में/g, 'ke bare mein').replace(/के साथ/g, 'ke saath').replace(/के बिना/g, 'ke bina').replace(/के बाद/g, 'ke baad').replace(/के पहले/g, 'ke pehle').replace(/के अंदर/g, 'ke andar').replace(/के बाहर/g, 'ke bahar').replace(/के ऊपर/g, 'ke upar').replace(/के नीचे/g, 'ke neeche').replace(/के आगे/g, 'ke aage').replace(/के पीछे/g, 'ke peeche').replace(/के दाएं/g, 'ke daayein').replace(/के बाएं/g, 'ke baayein');\n    return englishText;\n  }\n  // Voice customization methods\n  toggleVoiceSettings() {\n    this.showVoiceSettings = !this.showVoiceSettings;\n  }\n  updateVoiceSettings(setting, value) {\n    this.voiceSettings[setting] = value;\n    this.saveVoiceSettings();\n  }\n  selectVoice(voiceName) {\n    this.voiceSettings.voiceName = voiceName;\n    this.saveVoiceSettings();\n    console.log('Voice selected:', voiceName);\n  }\n  loadVoiceSettings() {\n    const saved = localStorage.getItem('aiVoiceSettings');\n    if (saved) {\n      this.voiceSettings = {\n        ...this.voiceSettings,\n        ...JSON.parse(saved)\n      };\n    }\n  }\n  saveVoiceSettings() {\n    localStorage.setItem('aiVoiceSettings', JSON.stringify(this.voiceSettings));\n  }\n  getFilteredVoices() {\n    if (this.voiceSettings.language === 'auto') {\n      return this.availableVoices;\n    }\n    return this.availableVoices.filter(voice => voice.lang.startsWith(this.voiceSettings.language));\n  }\n  getVoiceDisplayName(voice) {\n    const lang = voice.lang.split('-')[0];\n    const country = voice.lang.split('-')[1];\n    const isNeural = voice.name.includes('Neural');\n    let displayName = voice.name;\n    if (isNeural) {\n      displayName += ' (Neural)';\n    }\n    displayName += ` (${lang.toUpperCase()}-${country})`;\n    return displayName;\n  }\n};\n__decorate([ViewChild('chatContainer')], ChatComponent.prototype, \"chatContainer\", void 0);\n__decorate([ViewChild('messageInput')], ChatComponent.prototype, \"messageInput\", void 0);\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})], ChatComponent);","map":{"version":3,"names":["Component","ViewChild","ChatComponent","constructor","authService","aiChatService","messages","newMessage","userData","isTyping","isListening","isSpeaking","recognition","synthesis","currentConversationId","isLoading","voiceSettings","rate","pitch","volume","voiceName","language","availableVoices","showVoiceSettings","Math","ngOnInit","getUserData","addWelcomeMessage","initializeSpeech","onvoiceschanged","getVoices","console","log","length","loadVoiceSettings","ngAfterViewChecked","scrollToBottom","push","id","text","firstName","username","sender","timestamp","Date","sendMessage","trim","userMessage","userInput","loadingMessage","request","question","userId","toString","conversationId","undefined","sendQuestion","subscribe","next","response","filter","msg","aiMessage","aiResponseId","error","errorMessage","onKeyPress","event","key","shiftKey","preventDefault","chatContainer","nativeElement","scrollTop","scrollHeight","err","clearChat","focusInput","setTimeout","messageInput","focus","submitFeedback","questionId","rating","feedback","feedbackRequest","showFeedbackMessage","message","feedbackMessage","window","speechSynthesis","webkitSpeechRecognition","continuous","interimResults","lang","maxAlternatives","onstart","onresult","transcript","results","englishText","convertHindiToEnglish","onerror","onend","startListening","start","stopListening","stop","speakMessage","cancel","processedText","processTextForSpeech","utterance","SpeechSynthesisUtterance","voices","preferredVoices","selectedVoice","selectBestVoice","voice","name","detectLanguage","addSpeechEvents","speak","replace","containsHindi","optimizeHindiEnglishSpeech","userVoice","find","v","languagePreferences","startsWith","hindiWords","hasHindi","some","word","includes","hindiPattern","test","onpause","onresume","stopSpeaking","toggleSpeech","lastAiMessage","pop","getAvailableVoices","forEach","hindiText","hindiToEnglish","hindi","english","Object","entries","regex","RegExp","toggleVoiceSettings","updateVoiceSettings","setting","value","saveVoiceSettings","selectVoice","saved","localStorage","getItem","JSON","parse","setItem","stringify","getFilteredVoices","getVoiceDisplayName","split","country","isNeural","displayName","toUpperCase","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/components/chat/chat.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { AiChatService, AiChatRequest, AiChatResponse } from '../../services/ai-chat.service';\n\ninterface ChatMessage {\n  id: number;\n  text: string;\n  sender: 'user' | 'ai';\n  timestamp: Date;\n  isLoading?: boolean;\n  aiResponseId?: string;\n  conversationId?: string;\n}\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit, AfterViewChecked {\n  @ViewChild('chatContainer') private chatContainer!: ElementRef;\n  @ViewChild('messageInput') private messageInput!: ElementRef;\n\n  messages: ChatMessage[] = [];\n  newMessage: string = '';\n  userData: any = null;\n  isTyping: boolean = false;\n  isListening: boolean = false;\n  isSpeaking: boolean = false;\n  recognition: any = null;\n  synthesis: SpeechSynthesis | null = null;\n  currentConversationId: string | null = null;\n  isLoading: boolean = false;\n\n  // Voice customization settings\n  voiceSettings: {\n    rate: number;\n    pitch: number;\n    volume: number;\n    voiceName: string;\n    language: string;\n  } = {\n    rate: 0.9,           // Speech rate (0.1 to 10)\n    pitch: 1.05,         // Pitch (0 to 2)\n    volume: 0.95,        // Volume (0 to 1)\n    voiceName: '',       // Selected voice name\n    language: 'auto'     // Language preference\n  };\n\n  availableVoices: SpeechSynthesisVoice[] = [];\n  showVoiceSettings: boolean = false;\n  \n  // Make Math available in template\n  Math = Math;\n\n  constructor(\n    private authService: AuthService,\n    private aiChatService: AiChatService\n  ) {}\n\n  ngOnInit(): void {\n    this.userData = this.authService.getUserData();\n    this.addWelcomeMessage();\n    this.initializeSpeech();\n    \n    // Load voices when they become available\n    if (this.synthesis) {\n      this.synthesis.onvoiceschanged = () => {\n        this.availableVoices = this.synthesis?.getVoices() || [];\n        console.log('Voices loaded:', this.availableVoices.length);\n        this.loadVoiceSettings();\n      };\n    }\n  }\n\n  ngAfterViewChecked(): void {\n    this.scrollToBottom();\n  }\n\n  private addWelcomeMessage(): void {\n    this.messages.push({\n      id: 1,\n      text: `Namaste ${this.userData?.firstName || this.userData?.username}! Main aapka AI assistant hoon. Aapko kya help chahiye aaj?`,\n      sender: 'ai',\n      timestamp: new Date()\n    });\n  }\n\n  sendMessage(): void {\n    if (this.newMessage.trim() && !this.isTyping && !this.isLoading) {\n      const userMessage: ChatMessage = {\n        id: this.messages.length + 1,\n        text: this.newMessage.trim(),\n        sender: 'user',\n        timestamp: new Date()\n      };\n\n      this.messages.push(userMessage);\n      const userInput = this.newMessage;\n      this.newMessage = '';\n      this.isTyping = true;\n      this.isLoading = true;\n\n      // Add loading message\n      const loadingMessage: ChatMessage = {\n        id: this.messages.length + 1,\n        text: 'Thinking...',\n        sender: 'ai',\n        timestamp: new Date(),\n        isLoading: true\n      };\n      this.messages.push(loadingMessage);\n\n      // Send to AI backend\n      const request: AiChatRequest = {\n        question: userInput,\n        userId: this.userData?.id?.toString() || this.userData?.username,\n        conversationId: this.currentConversationId || undefined\n      };\n\n      this.aiChatService.sendQuestion(request).subscribe({\n        next: (response: AiChatResponse) => {\n          // Remove loading message\n          this.messages = this.messages.filter(msg => !msg.isLoading);\n          \n          // Store conversation ID for future messages\n          this.currentConversationId = response.conversationId?.toString() || null;\n          \n          // Add AI response\n          const aiMessage: ChatMessage = {\n            id: this.messages.length + 1,\n            text: response.response,\n            sender: 'ai',\n            timestamp: new Date(),\n            aiResponseId: response.conversationId?.toString() || '',\n            conversationId: response.conversationId?.toString() || ''\n          };\n\n          this.messages.push(aiMessage);\n          this.isTyping = false;\n          this.isLoading = false;\n        },\n        error: (error) => {\n          console.error('Error getting AI response:', error);\n          \n          // Remove loading message\n          this.messages = this.messages.filter(msg => !msg.isLoading);\n          \n          // Add error message\n          const errorMessage: ChatMessage = {\n            id: this.messages.length + 1,\n            text: 'Sorry, main abhi aapki help nahi kar pa raha hoon. Please try again later.',\n            sender: 'ai',\n            timestamp: new Date()\n          };\n\n          this.messages.push(errorMessage);\n          this.isTyping = false;\n          this.isLoading = false;\n        }\n      });\n    }\n  }\n\n  onKeyPress(event: KeyboardEvent): void {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      this.sendMessage();\n    }\n  }\n\n  private scrollToBottom(): void {\n    try {\n      this.chatContainer.nativeElement.scrollTop = this.chatContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n\n  clearChat(): void {\n    this.messages = [];\n    this.currentConversationId = null;\n    this.addWelcomeMessage();\n  }\n\n  focusInput(): void {\n    setTimeout(() => {\n      this.messageInput.nativeElement.focus();\n    }, 100);\n  }\n\n  submitFeedback(questionId: string, conversationId: string, rating: number, feedback: string): void {\n    const feedbackRequest = {\n      conversationId: conversationId,\n      questionId: questionId,\n      rating: rating,\n      feedback: feedback\n    };\n\n    this.aiChatService.submitFeedback(feedbackRequest).subscribe({\n      next: (response) => {\n        console.log('Feedback submitted successfully:', response);\n        // Show a brief success message\n        this.showFeedbackMessage('Thank you for your feedback!');\n      },\n      error: (error) => {\n        console.error('Error submitting feedback:', error);\n        this.showFeedbackMessage('Failed to submit feedback. Please try again.');\n      }\n    });\n  }\n\n  private showFeedbackMessage(message: string): void {\n    // Create a temporary feedback message\n    const feedbackMessage: ChatMessage = {\n      id: this.messages.length + 1,\n      text: message,\n      sender: 'ai',\n      timestamp: new Date()\n    };\n\n    this.messages.push(feedbackMessage);\n\n    // Remove the feedback message after 3 seconds\n    setTimeout(() => {\n      this.messages = this.messages.filter(msg => msg.id !== feedbackMessage.id);\n    }, 3000);\n  }\n\n  private initializeSpeech(): void {\n    // Initialize speech synthesis\n    if ('speechSynthesis' in window) {\n      this.synthesis = window.speechSynthesis;\n    }\n\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window) {\n      this.recognition = new (window as any).webkitSpeechRecognition();\n      this.recognition.continuous = false;\n      this.recognition.interimResults = false;\n      this.recognition.lang = 'hi-IN'; // Hindi (India)\n      this.recognition.maxAlternatives = 3; // Get multiple recognition alternatives\n\n      this.recognition.onstart = () => {\n        this.isListening = true;\n      };\n\n      this.recognition.onresult = (event: any) => {\n        const transcript = event.results[0][0].transcript;\n        // Convert Hindi speech to English text\n        const englishText = this.convertHindiToEnglish(transcript);\n        this.newMessage = englishText;\n        this.isListening = false;\n      };\n\n      this.recognition.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        this.isListening = false;\n      };\n\n      this.recognition.onend = () => {\n        this.isListening = false;\n      };\n    }\n  }\n\n  startListening(): void {\n    if (this.recognition && !this.isListening) {\n      try {\n        this.recognition.start();\n      } catch (error) {\n        console.error('Error starting speech recognition:', error);\n        this.isListening = false;\n      }\n    }\n  }\n\n  stopListening(): void {\n    if (this.recognition && this.isListening) {\n      try {\n        this.recognition.stop();\n      } catch (error) {\n        console.error('Error stopping speech recognition:', error);\n      }\n    }\n  }\n\n  speakMessage(text: string): void {\n    if (this.synthesis) {\n      try {\n        // Stop any current speech\n        this.synthesis.cancel();\n\n        // Process text for more natural speech\n        const processedText = this.processTextForSpeech(text);\n        \n        const utterance = new SpeechSynthesisUtterance(processedText);\n        \n        // Enhanced voice selection for more genuine AI voice\n        const voices = this.synthesis.getVoices();\n        const preferredVoices = [\n          // Premium Neural voices for best quality\n          'hi-IN-NeerjaNeural',      // Hindi Female Neural - Most natural\n          'en-IN-NeerjaNeural',      // English (India) Female Neural\n          'hi-IN-MadhurNeural',      // Hindi Male Neural\n          'en-IN-PrabhatNeural',     // English (India) Male Neural\n          'en-US-JennyNeural',       // US English Female Neural\n          'en-US-GuyNeural',         // US English Male Neural\n          'en-GB-SoniaNeural',       // British English Female Neural\n          'en-GB-RyanNeural',        // British English Male Neural\n          \n          // Fallback voices\n          'hi-IN',                   // Hindi\n          'en-IN',                   // English (India)\n          'en-US',                   // US English\n          'en-GB'                    // British English\n        ];\n\n        // Find the best available voice with enhanced selection\n        let selectedVoice = this.selectBestVoice(voices, preferredVoices);\n        \n        if (selectedVoice) {\n          utterance.voice = selectedVoice;\n          console.log('Selected voice:', selectedVoice.name, 'Language:', selectedVoice.lang);\n        }\n\n        // Apply user voice settings for personalized AI voice\n        utterance.rate = this.voiceSettings.rate;\n        utterance.pitch = this.voiceSettings.pitch;\n        utterance.volume = this.voiceSettings.volume;\n        utterance.lang = this.voiceSettings.language === 'auto' ? this.detectLanguage(text) : this.voiceSettings.language;\n\n        // Add natural pauses and emphasis\n        this.addSpeechEvents(utterance);\n\n        this.synthesis.speak(utterance);\n      } catch (error) {\n        console.error('Error with speech synthesis:', error);\n        this.isSpeaking = false;\n      }\n    }\n  }\n\n  private processTextForSpeech(text: string): string {\n    // Add natural pauses and emphasis for more genuine speech\n    let processedText = text;\n    \n    // Add pauses after sentences\n    processedText = processedText.replace(/\\./g, '... ');\n    processedText = processedText.replace(/\\!/g, '!... ');\n    processedText = processedText.replace(/\\?/g, '?... ');\n    \n    // Add emphasis to important words\n    processedText = processedText.replace(/\\b(Ayush Dwivedi|Alka Dwivedi|Anshi Shukla|Vijay Kumar Dwivedi|Shreya Dwivedi)\\b/gi, \n      '<emphasis level=\"strong\">$1</emphasis>');\n    \n    // Add natural pauses for better flow\n    processedText = processedText.replace(/,/g, ',... ');\n    processedText = processedText.replace(/;/g, ';... ');\n    \n    // Optimize for Hindi-English mixed speech\n    if (this.containsHindi(text)) {\n      processedText = this.optimizeHindiEnglishSpeech(processedText);\n    }\n    \n    return processedText;\n  }\n\n  private selectBestVoice(voices: SpeechSynthesisVoice[], preferredVoices: string[]): SpeechSynthesisVoice | null {\n    // First, try to use user's selected voice\n    if (this.voiceSettings.voiceName) {\n      const userVoice = voices.find(v => v.name === this.voiceSettings.voiceName);\n      if (userVoice) {\n        return userVoice;\n      }\n    }\n    \n    // Then try to find exact matches from preferred voices\n    for (const voiceName of preferredVoices) {\n      const voice = voices.find(v => v.name === voiceName);\n      if (voice) {\n        return voice;\n      }\n    }\n    \n    // If no exact match, find best available voice by language\n    const languagePreferences = ['hi-IN', 'en-IN', 'en-US', 'en-GB'];\n    \n    for (const lang of languagePreferences) {\n      const voice = voices.find(v => v.lang.startsWith(lang));\n      if (voice) {\n        return voice;\n      }\n    }\n    \n    // Fallback to any available voice\n    return voices.length > 0 ? voices[0] : null;\n  }\n\n  private detectLanguage(text: string): string {\n    // Simple language detection for Hindi vs English\n    const hindiWords = ['है', 'में', 'आप', 'मुझे', 'क्या', 'कैसे', 'कहाँ', 'कब', 'कौन', 'मदद', 'समस्या', 'समाधान'];\n    const hasHindi = hindiWords.some(word => text.includes(word));\n    \n    if (hasHindi) {\n      return 'hi-IN';\n    } else {\n      return 'en-US';\n    }\n  }\n\n  private containsHindi(text: string): boolean {\n    const hindiPattern = /[\\u0900-\\u097F]/;\n    return hindiPattern.test(text);\n  }\n\n  private optimizeHindiEnglishSpeech(text: string): string {\n    // Add natural pauses between Hindi and English words\n    text = text.replace(/([a-zA-Z]+)([हैमेंआपमुझेक्याकैसेकहाँकबकौन])/g, '$1... $2');\n    text = text.replace(/([हैमेंआपमुझेक्याकैसेकहाँकबकौन])([a-zA-Z]+)/g, '$1... $2');\n    \n    return text;\n  }\n\n  private addSpeechEvents(utterance: SpeechSynthesisUtterance): void {\n    utterance.onstart = () => {\n      this.isSpeaking = true;\n      console.log('AI started speaking');\n    };\n\n    utterance.onend = () => {\n      this.isSpeaking = false;\n      console.log('AI finished speaking');\n    };\n\n    utterance.onpause = () => {\n      console.log('AI speech paused');\n    };\n\n    utterance.onresume = () => {\n      console.log('AI speech resumed');\n    };\n\n    utterance.onerror = (event) => {\n      console.error('Speech synthesis error:', event);\n      this.isSpeaking = false;\n    };\n  }\n\n  stopSpeaking(): void {\n    if (this.synthesis) {\n      try {\n        this.synthesis.cancel();\n        this.isSpeaking = false;\n      } catch (error) {\n        console.error('Error stopping speech synthesis:', error);\n      }\n    }\n  }\n\n  toggleSpeech(): void {\n    if (this.isSpeaking) {\n      this.stopSpeaking();\n    } else {\n      // Speak the last AI message\n      const lastAiMessage = this.messages\n        .filter(msg => msg.sender === 'ai')\n        .pop();\n      if (lastAiMessage) {\n        this.speakMessage(lastAiMessage.text);\n      }\n    }\n  }\n\n  getAvailableVoices(): void {\n    if (this.synthesis) {\n      const voices = this.synthesis.getVoices();\n      console.log('Available voices:');\n      voices.forEach(voice => {\n        console.log(`- ${voice.name} (${voice.lang})`);\n      });\n    }\n  }\n\n  private convertHindiToEnglish(hindiText: string): string {\n    // Common Hindi to English word mappings\n    const hindiToEnglish: { [key: string]: string } = {\n      // Basic words\n      'नमस्ते': 'namaste',\n      'है': 'hai',\n      'में': 'main',\n      'आप': 'aap',\n      'मुझे': 'mujhe',\n      'क्या': 'kya',\n      'कैसे': 'kaise',\n      'कहाँ': 'kahan',\n      'कब': 'kab',\n      'कौन': 'kaun',\n      \n      // Common phrases\n      'मदद': 'help',\n      'समस्या': 'problem',\n      'समाधान': 'solution',\n      'जानकारी': 'information',\n      'प्रश्न': 'question',\n      'उत्तर': 'answer',\n      'सहायता': 'assistance',\n      'सेवा': 'service',\n      \n      // Actions\n      'करना': 'karna',\n      'जाना': 'jana',\n      'आना': 'aana',\n      'देखना': 'dekhna',\n      'सुनना': 'sunna',\n      'बोलना': 'bolna',\n      'समझना': 'samajhna',\n      'सोचना': 'sochna',\n      \n      // Time related\n      'आज': 'aaj',\n      'कल': 'kal',\n      'परसों': 'parson',\n      'सुबह': 'subah',\n      'शाम': 'sham',\n      'रात': 'raat',\n      'दिन': 'din',\n      \n      // Numbers\n      'एक': 'ek',\n      'दो': 'do',\n      'तीन': 'teen',\n      'चार': 'char',\n      'पांच': 'paanch',\n      'छह': 'cheh',\n      'सात': 'saat',\n      'आठ': 'aath',\n      'नौ': 'nau',\n      'दस': 'das',\n      \n      // Common expressions\n      'धन्यवाद': 'thank you',\n      'कृपया': 'please',\n      'माफ़ करें': 'sorry',\n      'ठीक है': 'okay',\n      'हाँ': 'yes',\n      'नहीं': 'no',\n      'बहुत': 'bahut',\n      'अच्छा': 'accha',\n      'बुरा': 'bura',\n      \n      // Technology terms\n      'कंप्यूटर': 'computer',\n      'मोबाइल': 'mobile',\n      'इंटरनेट': 'internet',\n      'वेबसाइट': 'website',\n      'एप्लिकेशन': 'application',\n      'सिस्टम': 'system',\n      'डेटा': 'data',\n      'फ़ाइल': 'file',\n      \n      // Business terms\n      'कंपनी': 'company',\n      'कार्यालय': 'office',\n      'कार्य': 'work',\n      'पैसा': 'money',\n      'लेनदेन': 'transaction',\n      'खाता': 'account',\n      'बैंक': 'bank',\n      \n      // Family and relationships\n      'परिवार': 'family',\n      'दोस्त': 'friend',\n      'भाई': 'bhai',\n      'बहन': 'behen',\n      'माता': 'mata',\n      'पिता': 'pita',\n      'बेटा': 'beta',\n      'बेटी': 'beti'\n    };\n\n    let englishText = hindiText;\n    \n    // Convert Hindi words to English\n    for (const [hindi, english] of Object.entries(hindiToEnglish)) {\n      const regex = new RegExp(hindi, 'gi');\n      englishText = englishText.replace(regex, english);\n    }\n    \n    // Handle common Hindi patterns\n    englishText = englishText\n      .replace(/हूँ/g, 'hoon')\n      .replace(/हैं/g, 'hain')\n      .replace(/था/g, 'tha')\n      .replace(/थी/g, 'thi')\n      .replace(/थे/g, 'the')\n      .replace(/रहा/g, 'raha')\n      .replace(/रही/g, 'rahi')\n      .replace(/रहे/g, 'rahe')\n      .replace(/कर/g, 'kar')\n      .replace(/की/g, 'ki')\n      .replace(/का/g, 'ka')\n      .replace(/के/g, 'ke')\n      .replace(/को/g, 'ko')\n      .replace(/से/g, 'se')\n      .replace(/में/g, 'main')\n      .replace(/पर/g, 'par')\n      .replace(/तक/g, 'tak')\n      .replace(/साथ/g, 'saath')\n      .replace(/बिना/g, 'bina')\n      .replace(/लिए/g, 'liye')\n      .replace(/द्वारा/g, 'dwara')\n      .replace(/के लिए/g, 'ke liye')\n      .replace(/की तरह/g, 'ki tarah')\n      .replace(/के बारे में/g, 'ke bare mein')\n      .replace(/के साथ/g, 'ke saath')\n      .replace(/के बिना/g, 'ke bina')\n      .replace(/के बाद/g, 'ke baad')\n      .replace(/के पहले/g, 'ke pehle')\n      .replace(/के अंदर/g, 'ke andar')\n      .replace(/के बाहर/g, 'ke bahar')\n      .replace(/के ऊपर/g, 'ke upar')\n      .replace(/के नीचे/g, 'ke neeche')\n      .replace(/के आगे/g, 'ke aage')\n      .replace(/के पीछे/g, 'ke peeche')\n      .replace(/के दाएं/g, 'ke daayein')\n      .replace(/के बाएं/g, 'ke baayein');\n\n    return englishText;\n  }\n\n  // Voice customization methods\n  toggleVoiceSettings(): void {\n    this.showVoiceSettings = !this.showVoiceSettings;\n  }\n\n  updateVoiceSettings(setting: 'rate' | 'pitch' | 'volume' | 'voiceName' | 'language', value: number | string): void {\n    (this.voiceSettings as any)[setting] = value;\n    this.saveVoiceSettings();\n  }\n\n  selectVoice(voiceName: string): void {\n    this.voiceSettings.voiceName = voiceName;\n    this.saveVoiceSettings();\n    console.log('Voice selected:', voiceName);\n  }\n\n  private loadVoiceSettings(): void {\n    const saved = localStorage.getItem('aiVoiceSettings');\n    if (saved) {\n      this.voiceSettings = { ...this.voiceSettings, ...JSON.parse(saved) };\n    }\n  }\n\n  private saveVoiceSettings(): void {\n    localStorage.setItem('aiVoiceSettings', JSON.stringify(this.voiceSettings));\n  }\n\n  getFilteredVoices(): SpeechSynthesisVoice[] {\n    if (this.voiceSettings.language === 'auto') {\n      return this.availableVoices;\n    }\n    return this.availableVoices.filter(voice => \n      voice.lang.startsWith(this.voiceSettings.language)\n    );\n  }\n\n  getVoiceDisplayName(voice: SpeechSynthesisVoice): string {\n    const lang = voice.lang.split('-')[0];\n    const country = voice.lang.split('-')[1];\n    const isNeural = voice.name.includes('Neural');\n    \n    let displayName = voice.name;\n    if (isNeural) {\n      displayName += ' (Neural)';\n    }\n    displayName += ` (${lang.toUpperCase()}-${country})`;\n    \n    return displayName;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}