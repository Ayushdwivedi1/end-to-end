{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/auth.service\";\nexport class DashboardComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n    this.crudOperations = [{\n      title: 'View All Users',\n      description: 'Browse and search through all registered users',\n      icon: 'bi bi-people-fill',\n      route: '/users',\n      color: 'primary',\n      action: 'View'\n    }, {\n      title: 'Create New User',\n      description: 'Add a new user to the system',\n      icon: 'bi bi-person-plus-fill',\n      route: '/users/create',\n      color: 'success',\n      action: 'Create'\n    }, {\n      title: 'User Management',\n      description: 'Edit, view, and manage existing users',\n      icon: 'bi bi-gear-fill',\n      route: '/users',\n      color: 'info',\n      action: 'Manage'\n    }, {\n      title: 'My Profile',\n      description: 'View and update your profile information',\n      icon: 'bi bi-person-circle',\n      route: '/profile',\n      color: 'warning',\n      action: 'Profile'\n    }, {\n      title: 'Change Password',\n      description: 'Update your account password securely',\n      icon: 'bi bi-shield-lock-fill',\n      route: '/change-password',\n      color: 'secondary',\n      action: 'Security'\n    }, {\n      title: 'System Overview',\n      description: 'View system statistics and analytics',\n      icon: 'bi bi-graph-up',\n      route: '/users',\n      color: 'dark',\n      action: 'Analytics'\n    }];\n  }\n  ngOnInit() {\n    this.userData = this.authService.getUserData();\n    if (!this.userData) {\n      this.router.navigate(['/login']);\n    }\n  }\n  navigateTo(route) {\n    this.router.navigate([route]);\n  }\n  logout() {\n    if (this.userData) {\n      this.authService.logout(this.userData.username).subscribe({\n        next: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/login']);\n        },\n        error: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/login']);\n        }\n      });\n    }\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 2,\n      vars: 0,\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"dashboard works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["DashboardComponent","constructor","router","authService","crudOperations","title","description","icon","route","color","action","ngOnInit","userData","getUserData","navigate","navigateTo","logout","username","subscribe","next","clearUserData","error","i0","ɵɵdirectiveInject","i1","Router","i2","AuthService","selectors","decls","vars","template","DashboardComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/components/dashboard/dashboard.component.ts","/Users/ent-00387/Documents/end-to-end/Ui/src/app/components/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  userData: any;\n  crudOperations = [\n    {\n      title: 'View All Users',\n      description: 'Browse and search through all registered users',\n      icon: 'bi bi-people-fill',\n      route: '/users',\n      color: 'primary',\n      action: 'View'\n    },\n    {\n      title: 'Create New User',\n      description: 'Add a new user to the system',\n      icon: 'bi bi-person-plus-fill',\n      route: '/users/create',\n      color: 'success',\n      action: 'Create'\n    },\n    {\n      title: 'User Management',\n      description: 'Edit, view, and manage existing users',\n      icon: 'bi bi-gear-fill',\n      route: '/users',\n      color: 'info',\n      action: 'Manage'\n    },\n    {\n      title: 'My Profile',\n      description: 'View and update your profile information',\n      icon: 'bi bi-person-circle',\n      route: '/profile',\n      color: 'warning',\n      action: 'Profile'\n    },\n    {\n      title: 'Change Password',\n      description: 'Update your account password securely',\n      icon: 'bi bi-shield-lock-fill',\n      route: '/change-password',\n      color: 'secondary',\n      action: 'Security'\n    },\n    {\n      title: 'System Overview',\n      description: 'View system statistics and analytics',\n      icon: 'bi bi-graph-up',\n      route: '/users',\n      color: 'dark',\n      action: 'Analytics'\n    }\n  ];\n\n  constructor(\n    private router: Router,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit() {\n    this.userData = this.authService.getUserData();\n    if (!this.userData) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  navigateTo(route: string) {\n    this.router.navigate([route]);\n  }\n\n  logout() {\n    if (this.userData) {\n      this.authService.logout(this.userData.username).subscribe({\n        next: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/login']);\n        },\n        error: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/login']);\n        }\n      });\n    }\n  }\n}\n","<p>dashboard works!</p>\n"],"mappings":";;;AASA,OAAM,MAAOA,kBAAkB;EAqD7BC,YACUC,MAAc,EACdC,WAAwB;IADxB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IArDrB,KAAAC,cAAc,GAAG,CACf;MACEC,KAAK,EAAE,gBAAgB;MACvBC,WAAW,EAAE,gDAAgD;MAC7DC,IAAI,EAAE,mBAAmB;MACzBC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE;KACT,EACD;MACEL,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,8BAA8B;MAC3CC,IAAI,EAAE,wBAAwB;MAC9BC,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE;KACT,EACD;MACEL,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,uCAAuC;MACpDC,IAAI,EAAE,iBAAiB;MACvBC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE;KACT,EACD;MACEL,KAAK,EAAE,YAAY;MACnBC,WAAW,EAAE,0CAA0C;MACvDC,IAAI,EAAE,qBAAqB;MAC3BC,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE;KACT,EACD;MACEL,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,uCAAuC;MACpDC,IAAI,EAAE,wBAAwB;MAC9BC,KAAK,EAAE,kBAAkB;MACzBC,KAAK,EAAE,WAAW;MAClBC,MAAM,EAAE;KACT,EACD;MACEL,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,sCAAsC;MACnDC,IAAI,EAAE,gBAAgB;MACtBC,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE;KACT,CACF;EAKG;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,WAAW,EAAE;IAC9C,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAE;MAClB,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEAC,UAAUA,CAACP,KAAa;IACtB,IAAI,CAACN,MAAM,CAACY,QAAQ,CAAC,CAACN,KAAK,CAAC,CAAC;EAC/B;EAEAQ,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACjB,IAAI,CAACT,WAAW,CAACa,MAAM,CAAC,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAAC,CAACC,SAAS,CAAC;QACxDC,IAAI,EAAEA,CAAA,KAAK;UACT,IAAI,CAAChB,WAAW,CAACiB,aAAa,EAAE;UAChC,IAAI,CAAClB,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC;QACDO,KAAK,EAAEA,CAAA,KAAK;UACV,IAAI,CAAClB,WAAW,CAACiB,aAAa,EAAE;UAChC,IAAI,CAAClB,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClC;OACD,CAAC;;EAEN;;;uBAlFWd,kBAAkB,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAlB3B,kBAAkB;MAAA4B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCT/BX,EAAA,CAAAa,cAAA,QAAG;UAAAb,EAAA,CAAAc,MAAA,uBAAgB;UAAAd,EAAA,CAAAe,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}