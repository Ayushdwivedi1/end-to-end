{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiChatService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl + '/api/ai-chat';\n  }\n  // Send a question to the AI\n  sendQuestion(request) {\n    return this.http.post(`${this.apiUrl}/ask`, request).pipe(map(response => response.data));\n  }\n  // Get conversation history\n  getConversationHistory(userId, sessionId) {\n    let url = `${this.apiUrl}/history`;\n    const params = [];\n    if (userId) {\n      params.push(`userId=${userId}`);\n    }\n    if (sessionId) {\n      params.push(`sessionId=${sessionId}`);\n    }\n    if (params.length > 0) {\n      url += '?' + params.join('&');\n    }\n    return this.http.get(url).pipe(map(response => response.data));\n  }\n  // Get conversation by ID\n  getConversationById(conversationId) {\n    return this.http.get(`${this.apiUrl}/conversation/${conversationId}`).pipe(map(response => response.data));\n  }\n  // Submit feedback for an AI response\n  submitFeedback(feedback) {\n    return this.http.post(`${this.apiUrl}/feedback`, feedback).pipe(map(response => response.data));\n  }\n  // Get learning insights\n  getLearningInsights() {\n    return this.http.get(`${this.apiUrl}/insights`).pipe(map(response => response.data));\n  }\n  // Get similar questions\n  getSimilarQuestions(keyword) {\n    return this.http.get(`${this.apiUrl}/similar-questions?keyword=${keyword}`).pipe(map(response => response.data));\n  }\n  // Trigger learning from feedback\n  learnFromFeedback() {\n    return this.http.post(`${this.apiUrl}/learn`, {}).pipe(map(response => response.data));\n  }\n  // Get AI performance statistics\n  getPerformanceStats() {\n    return this.http.get(`${this.apiUrl}/stats`).pipe(map(response => response.data));\n  }\n  // Clear session history\n  clearSessionHistory(sessionId) {\n    return this.http.delete(`${this.apiUrl}/clear-session?sessionId=${sessionId}`).pipe(map(response => response.data));\n  }\n  // Update learning status\n  updateLearningStatus(conversationId, isLearned, learningNotes) {\n    let url = `${this.apiUrl}/learning-status/${conversationId}?isLearned=${isLearned}`;\n    if (learningNotes) {\n      url += `&learningNotes=${encodeURIComponent(learningNotes)}`;\n    }\n    return this.http.put(url, {}).pipe(map(response => response.data));\n  }\n  static {\n    this.ɵfac = function AiChatService_Factory(t) {\n      return new (t || AiChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiChatService,\n      factory: AiChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","environment","AiChatService","constructor","http","apiUrl","sendQuestion","request","post","pipe","response","data","getConversationHistory","userId","sessionId","url","params","push","length","join","get","getConversationById","conversationId","submitFeedback","feedback","getLearningInsights","getSimilarQuestions","keyword","learnFromFeedback","getPerformanceStats","clearSessionHistory","delete","updateLearningStatus","isLearned","learningNotes","encodeURIComponent","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/ai-chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface AiChatRequest {\n  question: string;\n  userId: string;\n  conversationId?: string;\n}\n\nexport interface AiChatResponse {\n  response: string;\n  confidenceScore: number;\n  languageUsed: string;\n  sessionId: string | null;\n  conversationId: number;\n  learningNotes: string | null;\n  isLearned: boolean;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data: T;\n  timestamp: string;\n}\n\nexport interface AiFeedbackRequest {\n  conversationId: string;\n  questionId: string;\n  rating: number;\n  feedback: string;\n}\n\nexport interface AiConversation {\n  id: string;\n  userId: string;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n  messageCount: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiChatService {\n  private apiUrl = environment.apiUrl + '/api/ai-chat';\n\n  constructor(private http: HttpClient) {}\n\n  // Send a question to the AI\n  sendQuestion(request: AiChatRequest): Observable<AiChatResponse> {\n    return this.http.post<ApiResponse<AiChatResponse>>(`${this.apiUrl}/ask`, request)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get conversation history\n  getConversationHistory(userId?: number, sessionId?: string): Observable<AiChatResponse[]> {\n    let url = `${this.apiUrl}/history`;\n    const params: string[] = [];\n    \n    if (userId) {\n      params.push(`userId=${userId}`);\n    }\n    if (sessionId) {\n      params.push(`sessionId=${sessionId}`);\n    }\n    \n    if (params.length > 0) {\n      url += '?' + params.join('&');\n    }\n    \n    return this.http.get<ApiResponse<AiChatResponse[]>>(url)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get conversation by ID\n  getConversationById(conversationId: number): Observable<AiChatResponse> {\n    return this.http.get<ApiResponse<AiChatResponse>>(`${this.apiUrl}/conversation/${conversationId}`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Submit feedback for an AI response\n  submitFeedback(feedback: AiFeedbackRequest): Observable<string> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/feedback`, feedback)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get learning insights\n  getLearningInsights(): Observable<any> {\n    return this.http.get<ApiResponse<any>>(`${this.apiUrl}/insights`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get similar questions\n  getSimilarQuestions(keyword: string): Observable<string[]> {\n    return this.http.get<ApiResponse<string[]>>(`${this.apiUrl}/similar-questions?keyword=${keyword}`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Trigger learning from feedback\n  learnFromFeedback(): Observable<string> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/learn`, {})\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get AI performance statistics\n  getPerformanceStats(): Observable<any> {\n    return this.http.get<ApiResponse<any>>(`${this.apiUrl}/stats`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Clear session history\n  clearSessionHistory(sessionId: string): Observable<string> {\n    return this.http.delete<ApiResponse<string>>(`${this.apiUrl}/clear-session?sessionId=${sessionId}`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Update learning status\n  updateLearningStatus(conversationId: number, isLearned: boolean, learningNotes?: string): Observable<string> {\n    let url = `${this.apiUrl}/learning-status/${conversationId}?isLearned=${isLearned}`;\n    if (learningNotes) {\n      url += `&learningNotes=${encodeURIComponent(learningNotes)}`;\n    }\n    \n    return this.http.put<ApiResponse<string>>(url, {})\n      .pipe(\n        map(response => response.data)\n      );\n  }\n} "],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AA4C5D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM,GAAG,cAAc;EAEb;EAEvC;EACAC,YAAYA,CAACC,OAAsB;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA8B,GAAG,IAAI,CAACH,MAAM,MAAM,EAAEE,OAAO,CAAC,CAC9EE,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAC,sBAAsBA,CAACC,MAAe,EAAEC,SAAkB;IACxD,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACV,MAAM,UAAU;IAClC,MAAMW,MAAM,GAAa,EAAE;IAE3B,IAAIH,MAAM,EAAE;MACVG,MAAM,CAACC,IAAI,CAAC,UAAUJ,MAAM,EAAE,CAAC;;IAEjC,IAAIC,SAAS,EAAE;MACbE,MAAM,CAACC,IAAI,CAAC,aAAaH,SAAS,EAAE,CAAC;;IAGvC,IAAIE,MAAM,CAACE,MAAM,GAAG,CAAC,EAAE;MACrBH,GAAG,IAAI,GAAG,GAAGC,MAAM,CAACG,IAAI,CAAC,GAAG,CAAC;;IAG/B,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAgCL,GAAG,CAAC,CACrDN,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAU,mBAAmBA,CAACC,cAAsB;IACxC,OAAO,IAAI,CAAClB,IAAI,CAACgB,GAAG,CAA8B,GAAG,IAAI,CAACf,MAAM,iBAAiBiB,cAAc,EAAE,CAAC,CAC/Fb,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAY,cAAcA,CAACC,QAA2B;IACxC,OAAO,IAAI,CAACpB,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEmB,QAAQ,CAAC,CAC5Ef,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAc,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACrB,IAAI,CAACgB,GAAG,CAAmB,GAAG,IAAI,CAACf,MAAM,WAAW,CAAC,CAC9DI,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAe,mBAAmBA,CAACC,OAAe;IACjC,OAAO,IAAI,CAACvB,IAAI,CAACgB,GAAG,CAAwB,GAAG,IAAI,CAACf,MAAM,8BAA8BsB,OAAO,EAAE,CAAC,CAC/FlB,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAiB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACxB,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAE,EAAE,CAAC,CACnEI,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAkB,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACzB,IAAI,CAACgB,GAAG,CAAmB,GAAG,IAAI,CAACf,MAAM,QAAQ,CAAC,CAC3DI,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAmB,mBAAmBA,CAAChB,SAAiB;IACnC,OAAO,IAAI,CAACV,IAAI,CAAC2B,MAAM,CAAsB,GAAG,IAAI,CAAC1B,MAAM,4BAA4BS,SAAS,EAAE,CAAC,CAChGL,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAqB,oBAAoBA,CAACV,cAAsB,EAAEW,SAAkB,EAAEC,aAAsB;IACrF,IAAInB,GAAG,GAAG,GAAG,IAAI,CAACV,MAAM,oBAAoBiB,cAAc,cAAcW,SAAS,EAAE;IACnF,IAAIC,aAAa,EAAE;MACjBnB,GAAG,IAAI,kBAAkBoB,kBAAkB,CAACD,aAAa,CAAC,EAAE;;IAG9D,OAAO,IAAI,CAAC9B,IAAI,CAACgC,GAAG,CAAsBrB,GAAG,EAAE,EAAE,CAAC,CAC/CN,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;;;uBAtGWT,aAAa,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbtC,aAAa;MAAAuC,OAAA,EAAbvC,aAAa,CAAAwC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}