{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api';\n  }\n  // Test endpoint\n  test() {\n    return this.http.get(`${this.apiUrl}/test`, {\n      responseType: 'text'\n    }).pipe(catchError(this.handleError));\n  }\n  // Get all users\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/users`).pipe(catchError(this.handleError));\n  }\n  // Get active users\n  getActiveUsers() {\n    return this.http.get(`${this.apiUrl}/users/active`).pipe(catchError(this.handleError));\n  }\n  // Get user by ID\n  getUserById(id) {\n    console.log('UserService: Making GET request to:', `${this.apiUrl}/users/${id}`);\n    return this.http.get(`${this.apiUrl}/users/${id}`).pipe(catchError(this.handleError));\n  }\n  // Get user by email\n  getUserByEmail(email) {\n    return this.http.get(`${this.apiUrl}/users/email/${encodeURIComponent(email)}`).pipe(catchError(this.handleError));\n  }\n  // Search users by name\n  searchUsersByName(name) {\n    return this.http.get(`${this.apiUrl}/users/search?name=${encodeURIComponent(name)}`).pipe(catchError(this.handleError));\n  }\n  // Create user\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/users`, user).pipe(catchError(this.handleError));\n  }\n  // Update user\n  updateUser(id, userUpdate) {\n    return this.http.put(`${this.apiUrl}/users/${id}`, userUpdate).pipe(catchError(this.handleError));\n  }\n  // Delete user\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/users/${id}`).pipe(catchError(this.handleError));\n  }\n  // Deactivate user\n  deactivateUser(id) {\n    return this.http.patch(`${this.apiUrl}/users/${id}/deactivate`, {}).pipe(catchError(this.handleError));\n  }\n  // Activate user\n  activateUser(id) {\n    return this.http.patch(`${this.apiUrl}/users/${id}/activate`, {}).pipe(catchError(this.handleError));\n  }\n  // Utility method to get user by ID and return just the user data\n  getUserByIdData(id) {\n    return this.getUserById(id).pipe(map(response => response.data));\n  }\n  // Utility method to get user by email and return just the user data\n  getUserByEmailData(email) {\n    return this.getUserByEmail(email).pipe(map(response => response.data));\n  }\n  // Utility method to get all users and return just the user data\n  getAllUsersData() {\n    return this.getAllUsers().pipe(map(response => response.data));\n  }\n  // Utility method to get active users and return just the user data\n  getActiveUsersData() {\n    return this.getActiveUsers().pipe(map(response => response.data));\n  }\n  // Utility method to search users by name and return just the user data\n  searchUsersByNameData(name) {\n    return this.searchUsersByName(name).pipe(map(response => response.data));\n  }\n  // Utility method to create user and return just the user data\n  createUserData(user) {\n    return this.createUser(user).pipe(map(response => response.data));\n  }\n  // Utility method to update user and return just the user data\n  updateUserData(id, userUpdate) {\n    return this.updateUser(id, userUpdate).pipe(map(response => response.data));\n  }\n  // Private error handler\n  handleError(error) {\n    console.error('UserService error:', error);\n    return throwError(() => error);\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","map","UserService","constructor","http","apiUrl","test","get","responseType","pipe","handleError","getAllUsers","getActiveUsers","getUserById","id","console","log","getUserByEmail","email","encodeURIComponent","searchUsersByName","name","createUser","user","post","updateUser","userUpdate","put","deleteUser","delete","deactivateUser","patch","activateUser","getUserByIdData","response","data","getUserByEmailData","getAllUsersData","getActiveUsersData","searchUsersByNameData","createUserData","updateUserData","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, filter } from 'rxjs/operators';\nimport { User, UserUpdate, ApiResponse } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = 'http://localhost:8080/api';\n\n  constructor(private http: HttpClient) { }\n\n  // Test endpoint\n  test(): Observable<string> {\n    return this.http.get(`${this.apiUrl}/test`, { responseType: 'text' })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Get all users\n  getAllUsers(): Observable<ApiResponse<User[]>> {\n    return this.http.get<ApiResponse<User[]>>(`${this.apiUrl}/users`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Get active users\n  getActiveUsers(): Observable<ApiResponse<User[]>> {\n    return this.http.get<ApiResponse<User[]>>(`${this.apiUrl}/users/active`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Get user by ID\n  getUserById(id: number): Observable<ApiResponse<User>> {\n    console.log('UserService: Making GET request to:', `${this.apiUrl}/users/${id}`);\n    return this.http.get<ApiResponse<User>>(`${this.apiUrl}/users/${id}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Get user by email\n  getUserByEmail(email: string): Observable<ApiResponse<User>> {\n    return this.http.get<ApiResponse<User>>(`${this.apiUrl}/users/email/${encodeURIComponent(email)}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Search users by name\n  searchUsersByName(name: string): Observable<ApiResponse<User[]>> {\n    return this.http.get<ApiResponse<User[]>>(`${this.apiUrl}/users/search?name=${encodeURIComponent(name)}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Create user\n  createUser(user: User): Observable<ApiResponse<User>> {\n    return this.http.post<ApiResponse<User>>(`${this.apiUrl}/users`, user)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Update user\n  updateUser(id: number, userUpdate: UserUpdate): Observable<ApiResponse<User>> {\n    return this.http.put<ApiResponse<User>>(`${this.apiUrl}/users/${id}`, userUpdate)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Delete user\n  deleteUser(id: number): Observable<ApiResponse<string>> {\n    return this.http.delete<ApiResponse<string>>(`${this.apiUrl}/users/${id}`)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Deactivate user\n  deactivateUser(id: number): Observable<ApiResponse<string>> {\n    return this.http.patch<ApiResponse<string>>(`${this.apiUrl}/users/${id}/deactivate`, {})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Activate user\n  activateUser(id: number): Observable<ApiResponse<string>> {\n    return this.http.patch<ApiResponse<string>>(`${this.apiUrl}/users/${id}/activate`, {})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Utility method to get user by ID and return just the user data\n  getUserByIdData(id: number): Observable<User | null> {\n    return this.getUserById(id).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to get user by email and return just the user data\n  getUserByEmailData(email: string): Observable<User | null> {\n    return this.getUserByEmail(email).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to get all users and return just the user data\n  getAllUsersData(): Observable<User[] | null> {\n    return this.getAllUsers().pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to get active users and return just the user data\n  getActiveUsersData(): Observable<User[] | null> {\n    return this.getActiveUsers().pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to search users by name and return just the user data\n  searchUsersByNameData(name: string): Observable<User[] | null> {\n    return this.searchUsersByName(name).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to create user and return just the user data\n  createUserData(user: User): Observable<User | null> {\n    return this.createUser(user).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Utility method to update user and return just the user data\n  updateUserData(id: number, userUpdate: UserUpdate): Observable<User | null> {\n    return this.updateUser(id, userUpdate).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Private error handler\n  private handleError(error: any): Observable<never> {\n    console.error('UserService error:', error);\n    return throwError(() => error);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}