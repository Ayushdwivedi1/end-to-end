{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080/api/auth';\n  }\n  // Register user\n  register(registerRequest) {\n    return this.http.post(`${this.apiUrl}/register`, registerRequest).pipe(catchError(this.handleError));\n  }\n  // Login user\n  login(loginRequest) {\n    return this.http.post(`${this.apiUrl}/login`, loginRequest).pipe(catchError(this.handleError));\n  }\n  // Logout user\n  logout(usernameOrEmail) {\n    return this.http.post(`${this.apiUrl}/logout?usernameOrEmail=${encodeURIComponent(usernameOrEmail)}`, {}).pipe(catchError(this.handleError));\n  }\n  // Forget password\n  forgetPassword(forgetPasswordRequest) {\n    return this.http.post(`${this.apiUrl}/forget-password`, forgetPasswordRequest).pipe(catchError(this.handleError));\n  }\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest) {\n    return this.http.post(`${this.apiUrl}/verify-otp`, verifyOtpRequest).pipe(catchError(this.handleError));\n  }\n  // Change password\n  changePassword(changePasswordRequest) {\n    return this.http.post(`${this.apiUrl}/change-password`, changePasswordRequest).pipe(catchError(this.handleError));\n  }\n  // Test email\n  testEmail(email) {\n    return this.http.post(`${this.apiUrl}/test-email?email=${encodeURIComponent(email)}`, {}).pipe(catchError(this.handleError));\n  }\n  // Store user data in localStorage\n  setUserData(userData) {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n  // Get user data from localStorage\n  getUserData() {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n  // Clear user data from localStorage\n  clearUserData() {\n    localStorage.removeItem('userData');\n  }\n  // Check if user is logged in\n  isLoggedIn() {\n    return this.getUserData() !== null;\n  }\n  // Store redirect URL\n  setRedirectUrl(url) {\n    localStorage.setItem('redirectUrl', url);\n  }\n  // Get redirect URL\n  getRedirectUrl() {\n    return localStorage.getItem('redirectUrl');\n  }\n  // Clear redirect URL\n  clearRedirectUrl() {\n    localStorage.removeItem('redirectUrl');\n  }\n  // Get current user ID\n  getCurrentUserId() {\n    const userData = this.getUserData();\n    return userData ? userData.id : null;\n  }\n  // Get current username\n  getCurrentUsername() {\n    const userData = this.getUserData();\n    return userData ? userData.username : null;\n  }\n  // Get current user email\n  getCurrentUserEmail() {\n    const userData = this.getUserData();\n    return userData ? userData.email : null;\n  }\n  // Get current user token\n  getCurrentUserToken() {\n    const userData = this.getUserData();\n    return userData && userData.token ? userData.token : null;\n  }\n  // Check if user has valid token\n  hasValidToken() {\n    const token = this.getCurrentUserToken();\n    return token !== null && token.length > 0;\n  }\n  // Logout and clear all data\n  logoutAndClear() {\n    const usernameOrEmail = this.getCurrentUsername() || this.getCurrentUserEmail();\n    if (usernameOrEmail) {\n      this.logout(usernameOrEmail).subscribe({\n        next: () => {\n          this.clearUserData();\n          this.clearRedirectUrl();\n        },\n        error: () => {\n          // Even if logout fails, clear local data\n          this.clearUserData();\n          this.clearRedirectUrl();\n        }\n      });\n    } else {\n      this.clearUserData();\n      this.clearRedirectUrl();\n    }\n  }\n  // Private error handler\n  handleError(error) {\n    console.error('AuthService error:', error);\n    return throwError(() => error);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","AuthService","constructor","http","apiUrl","register","registerRequest","post","pipe","handleError","login","loginRequest","logout","usernameOrEmail","encodeURIComponent","forgetPassword","forgetPasswordRequest","verifyOtpAndResetPassword","verifyOtpRequest","changePassword","changePasswordRequest","testEmail","email","setUserData","userData","localStorage","setItem","JSON","stringify","getUserData","getItem","parse","clearUserData","removeItem","isLoggedIn","setRedirectUrl","url","getRedirectUrl","clearRedirectUrl","getCurrentUserId","id","getCurrentUsername","username","getCurrentUserEmail","getCurrentUserToken","token","hasValidToken","length","logoutAndClear","subscribe","next","error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { \n  LoginRequest, \n  RegisterRequest, \n  AuthResponse, \n  ForgetPasswordRequest, \n  VerifyOtpRequest, \n  ChangePasswordRequest, \n  ApiResponse \n} from '../models/auth.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api/auth';\n\n  constructor(private http: HttpClient) { }\n\n  // Register user\n  register(registerRequest: RegisterRequest): Observable<ApiResponse<AuthResponse>> {\n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/register`, registerRequest)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Login user\n  login(loginRequest: LoginRequest): Observable<ApiResponse<AuthResponse>> {\n    return this.http.post<ApiResponse<AuthResponse>>(`${this.apiUrl}/login`, loginRequest)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Logout user\n  logout(usernameOrEmail: string): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/logout?usernameOrEmail=${encodeURIComponent(usernameOrEmail)}`, {})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Forget password\n  forgetPassword(forgetPasswordRequest: ForgetPasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/forget-password`, forgetPasswordRequest)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Verify OTP and reset password\n  verifyOtpAndResetPassword(verifyOtpRequest: VerifyOtpRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/verify-otp`, verifyOtpRequest)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Change password\n  changePassword(changePasswordRequest: ChangePasswordRequest): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/change-password`, changePasswordRequest)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Test email\n  testEmail(email: string): Observable<ApiResponse<string>> {\n    return this.http.post<ApiResponse<string>>(`${this.apiUrl}/test-email?email=${encodeURIComponent(email)}`, {})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  // Store user data in localStorage\n  setUserData(userData: AuthResponse): void {\n    localStorage.setItem('userData', JSON.stringify(userData));\n  }\n\n  // Get user data from localStorage\n  getUserData(): AuthResponse | null {\n    const userData = localStorage.getItem('userData');\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  // Clear user data from localStorage\n  clearUserData(): void {\n    localStorage.removeItem('userData');\n  }\n\n  // Check if user is logged in\n  isLoggedIn(): boolean {\n    return this.getUserData() !== null;\n  }\n\n  // Store redirect URL\n  setRedirectUrl(url: string): void {\n    localStorage.setItem('redirectUrl', url);\n  }\n\n  // Get redirect URL\n  getRedirectUrl(): string | null {\n    return localStorage.getItem('redirectUrl');\n  }\n\n  // Clear redirect URL\n  clearRedirectUrl(): void {\n    localStorage.removeItem('redirectUrl');\n  }\n\n  // Get current user ID\n  getCurrentUserId(): number | null {\n    const userData = this.getUserData();\n    return userData ? userData.id : null;\n  }\n\n  // Get current username\n  getCurrentUsername(): string | null {\n    const userData = this.getUserData();\n    return userData ? userData.username : null;\n  }\n\n  // Get current user email\n  getCurrentUserEmail(): string | null {\n    const userData = this.getUserData();\n    return userData ? userData.email : null;\n  }\n\n  // Get current user token\n  getCurrentUserToken(): string | null {\n    const userData = this.getUserData();\n    return userData && userData.token ? userData.token : null;\n  }\n\n  // Check if user has valid token\n  hasValidToken(): boolean {\n    const token = this.getCurrentUserToken();\n    return token !== null && token.length > 0;\n  }\n\n  // Logout and clear all data\n  logoutAndClear(): void {\n    const usernameOrEmail = this.getCurrentUsername() || this.getCurrentUserEmail();\n    if (usernameOrEmail) {\n      this.logout(usernameOrEmail).subscribe({\n        next: () => {\n          this.clearUserData();\n          this.clearRedirectUrl();\n        },\n        error: () => {\n          // Even if logout fails, clear local data\n          this.clearUserData();\n          this.clearRedirectUrl();\n        }\n      });\n    } else {\n      this.clearUserData();\n      this.clearRedirectUrl();\n    }\n  }\n\n  // Private error handler\n  private handleError(error: any): Observable<never> {\n    console.error('AuthService error:', error);\n    return throwError(() => error);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}