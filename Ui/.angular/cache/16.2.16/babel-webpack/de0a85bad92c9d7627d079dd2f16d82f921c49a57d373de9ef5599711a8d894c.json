{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiChatService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl + '/api/ai-chat';\n  }\n  // Send a question to the AI\n  sendQuestion(request) {\n    return this.http.post(`${this.apiUrl}/ask`, request).pipe(map(response => response.data));\n  }\n  // Get conversation history\n  getConversations(userId) {\n    return this.http.get(`${this.apiUrl}/conversations/${userId}`);\n  }\n  // Get messages from a specific conversation\n  getConversationMessages(conversationId) {\n    return this.http.get(`${this.apiUrl}/conversation/${conversationId}/messages`);\n  }\n  // Submit feedback for an AI response\n  submitFeedback(feedback) {\n    return this.http.post(`${this.apiUrl}/feedback`, feedback);\n  }\n  // Get AI performance statistics\n  getPerformanceStats(userId) {\n    return this.http.get(`${this.apiUrl}/stats/${userId}`);\n  }\n  // Delete a conversation\n  deleteConversation(conversationId) {\n    return this.http.delete(`${this.apiUrl}/conversation/${conversationId}`);\n  }\n  // Clear all conversations for a user\n  clearAllConversations(userId) {\n    return this.http.delete(`${this.apiUrl}/conversations/${userId}`);\n  }\n  static {\n    this.ɵfac = function AiChatService_Factory(t) {\n      return new (t || AiChatService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiChatService,\n      factory: AiChatService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","environment","AiChatService","constructor","http","apiUrl","sendQuestion","request","post","pipe","response","data","getConversations","userId","get","getConversationMessages","conversationId","submitFeedback","feedback","getPerformanceStats","deleteConversation","delete","clearAllConversations","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/services/ai-chat.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\n\nexport interface AiChatRequest {\n  question: string;\n  userId: string;\n  conversationId?: string;\n}\n\nexport interface AiChatResponse {\n  response: string;\n  confidenceScore: number;\n  languageUsed: string;\n  sessionId: string | null;\n  conversationId: number;\n  learningNotes: string | null;\n  isLearned: boolean;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data: T;\n  timestamp: string;\n}\n\nexport interface AiFeedbackRequest {\n  conversationId: string;\n  questionId: string;\n  rating: number;\n  feedback: string;\n}\n\nexport interface AiConversation {\n  id: string;\n  userId: string;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n  messageCount: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiChatService {\n  private apiUrl = environment.apiUrl + '/api/ai-chat';\n\n  constructor(private http: HttpClient) {}\n\n  // Send a question to the AI\n  sendQuestion(request: AiChatRequest): Observable<AiChatResponse> {\n    return this.http.post<ApiResponse<AiChatResponse>>(`${this.apiUrl}/ask`, request)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  // Get conversation history\n  getConversations(userId: string): Observable<AiConversation[]> {\n    return this.http.get<AiConversation[]>(`${this.apiUrl}/conversations/${userId}`);\n  }\n\n  // Get messages from a specific conversation\n  getConversationMessages(conversationId: string): Observable<AiChatResponse[]> {\n    return this.http.get<AiChatResponse[]>(`${this.apiUrl}/conversation/${conversationId}/messages`);\n  }\n\n  // Submit feedback for an AI response\n  submitFeedback(feedback: AiFeedbackRequest): Observable<any> {\n    return this.http.post(`${this.apiUrl}/feedback`, feedback);\n  }\n\n  // Get AI performance statistics\n  getPerformanceStats(userId: string): Observable<any> {\n    return this.http.get(`${this.apiUrl}/stats/${userId}`);\n  }\n\n  // Delete a conversation\n  deleteConversation(conversationId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/conversation/${conversationId}`);\n  }\n\n  // Clear all conversations for a user\n  clearAllConversations(userId: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/conversations/${userId}`);\n  }\n} "],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AA4C5D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM,GAAG,cAAc;EAEb;EAEvC;EACAC,YAAYA,CAACC,OAAsB;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA8B,GAAG,IAAI,CAACH,MAAM,MAAM,EAAEE,OAAO,CAAC,CAC9EE,IAAI,CACHT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;EACAC,gBAAgBA,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAmB,GAAG,IAAI,CAACT,MAAM,kBAAkBQ,MAAM,EAAE,CAAC;EAClF;EAEA;EACAE,uBAAuBA,CAACC,cAAsB;IAC5C,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAmB,GAAG,IAAI,CAACT,MAAM,iBAAiBW,cAAc,WAAW,CAAC;EAClG;EAEA;EACAC,cAAcA,CAACC,QAA2B;IACxC,OAAO,IAAI,CAACd,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACH,MAAM,WAAW,EAAEa,QAAQ,CAAC;EAC5D;EAEA;EACAC,mBAAmBA,CAACN,MAAc;IAChC,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACT,MAAM,UAAUQ,MAAM,EAAE,CAAC;EACxD;EAEA;EACAO,kBAAkBA,CAACJ,cAAsB;IACvC,OAAO,IAAI,CAACZ,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,MAAM,iBAAiBW,cAAc,EAAE,CAAC;EAC1E;EAEA;EACAM,qBAAqBA,CAACT,MAAc;IAClC,OAAO,IAAI,CAACT,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAAChB,MAAM,kBAAkBQ,MAAM,EAAE,CAAC;EACnE;;;uBAzCWX,aAAa,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbxB,aAAa;MAAAyB,OAAA,EAAbzB,aAAa,CAAA0B,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}