{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Get user data from auth service\n    const userData = this.authService.getUserData();\n    // Add authorization header if user is logged in\n    if (userData && userData.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${userData.token}`\n        }\n      });\n    }\n    // Handle the request and catch errors\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized errors\n      if (error.status === 401) {\n        console.log('Unauthorized access, redirecting to login');\n        this.authService.clearUserData();\n        this.router.navigate(['/login']);\n      }\n      // Handle 403 Forbidden errors\n      if (error.status === 403) {\n        console.log('Access forbidden');\n      }\n      // Return the error to be handled by the component\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","constructor","authService","router","intercept","request","next","userData","getUserData","token","clone","setHeaders","Authorization","handle","pipe","error","status","console","log","clearUserData","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Get user data from auth service\n    const userData = this.authService.getUserData();\n    \n    // Add authorization header if user is logged in\n    if (userData && userData.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${userData.token}`\n        }\n      });\n    }\n\n    // Handle the request and catch errors\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle 401 Unauthorized errors\n        if (error.status === 401) {\n          console.log('Unauthorized access, redirecting to login');\n          this.authService.clearUserData();\n          this.router.navigate(['/login']);\n        }\n        \n        // Handle 403 Forbidden errors\n        if (error.status === 403) {\n          console.log('Access forbidden');\n        }\n        \n        // Return the error to be handled by the component\n        return throwError(() => error);\n      })\n    );\n  }\n} "],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,eAAe;EAE1BC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACL,WAAW,CAACM,WAAW,EAAE;IAE/C;IACA,IAAID,QAAQ,IAAIA,QAAQ,CAACE,KAAK,EAAE;MAC9BJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,QAAQ,CAACE,KAAK;;OAE1C,CAAC;;IAGJ;IACA,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9Bf,UAAU,CAAEgB,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxBC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QACxD,IAAI,CAAChB,WAAW,CAACiB,aAAa,EAAE;QAChC,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAGlC;MACA,IAAIL,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;MAGjC;MACA,OAAOpB,UAAU,CAAC,MAAMiB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBAvCWf,eAAe,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAf1B,eAAe;MAAA2B,OAAA,EAAf3B,eAAe,CAAA4B;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}