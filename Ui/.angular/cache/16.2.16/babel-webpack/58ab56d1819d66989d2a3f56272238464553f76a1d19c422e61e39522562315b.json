{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nexport let AppComponent = class AppComponent {\n  constructor(authService, router, location) {\n    this.authService = authService;\n    this.router = router;\n    this.location = location;\n    this.title = 'AI Central';\n  }\n  ngOnInit() {\n    // Handle browser back/forward navigation\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.handleNavigation(event);\n      }\n    });\n  }\n  handleNavigation(event) {\n    const isLoggedIn = this.isLoggedIn();\n    const currentUrl = event.url;\n    // If user is not logged in and trying to access protected routes\n    if (!isLoggedIn && this.isProtectedRoute(currentUrl)) {\n      this.router.navigate(['/']);\n      return;\n    }\n    // If user is logged in and on login page, redirect to dashboard and replace history\n    if (isLoggedIn && currentUrl === '/login') {\n      this.router.navigate(['/dashboard'], {\n        replaceUrl: true\n      });\n      return;\n    }\n    // If user is logged in and on landing page, redirect to dashboard\n    if (isLoggedIn && currentUrl === '/') {\n      this.router.navigate(['/dashboard']);\n      return;\n    }\n    // If user is not logged in and on protected routes, redirect to login\n    if (!isLoggedIn && this.isProtectedRoute(currentUrl)) {\n      this.router.navigate(['/login']);\n      return;\n    }\n    // Clear any cached data if user is not logged in\n    if (!isLoggedIn) {\n      this.authService.clearUserData();\n    }\n  }\n  isProtectedRoute(url) {\n    const protectedRoutes = ['/dashboard', '/user-list', '/user-create', '/user-edit', '/user-view', '/profile', '/change-password'];\n    return protectedRoutes.some(route => url.startsWith(route));\n  }\n  isLoggedIn() {\n    return this.authService.isLoggedIn();\n  }\n  isOnLandingPage() {\n    return this.router.url === '/';\n  }\n  logout() {\n    const userData = this.authService.getUserData();\n    if (userData) {\n      this.authService.logout(userData.username).subscribe({\n        next: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/']);\n        },\n        error: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/']);\n        }\n      });\n    } else {\n      this.authService.clearUserData();\n      this.router.navigate(['/']);\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","NavigationEnd","filter","AppComponent","constructor","authService","router","location","title","ngOnInit","events","pipe","event","subscribe","handleNavigation","isLoggedIn","currentUrl","url","isProtectedRoute","navigate","replaceUrl","clearUserData","protectedRoutes","some","route","startsWith","isOnLandingPage","logout","userData","getUserData","username","next","error","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/ent-00387/Documents/end-to-end/Ui/src/app/app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd, Location } from '@angular/router';\nimport { AuthService } from './services/auth.service';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'AI Central';\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private location: Location\n  ) {}\n\n  ngOnInit(): void {\n    // Handle browser back/forward navigation\n    this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd)\n    ).subscribe((event: any) => {\n      if (event instanceof NavigationEnd) {\n        this.handleNavigation(event);\n      }\n    });\n  }\n\n  private handleNavigation(event: NavigationEnd): void {\n    const isLoggedIn = this.isLoggedIn();\n    const currentUrl = event.url;\n\n    // If user is not logged in and trying to access protected routes\n    if (!isLoggedIn && this.isProtectedRoute(currentUrl)) {\n      this.router.navigate(['/']);\n      return;\n    }\n\n    // If user is logged in and on login page, redirect to dashboard and replace history\n    if (isLoggedIn && currentUrl === '/login') {\n      this.router.navigate(['/dashboard'], { replaceUrl: true });\n      return;\n    }\n\n    // If user is logged in and on landing page, redirect to dashboard\n    if (isLoggedIn && currentUrl === '/') {\n      this.router.navigate(['/dashboard']);\n      return;\n    }\n\n    // If user is not logged in and on protected routes, redirect to login\n    if (!isLoggedIn && this.isProtectedRoute(currentUrl)) {\n      this.router.navigate(['/login']);\n      return;\n    }\n\n    // Clear any cached data if user is not logged in\n    if (!isLoggedIn) {\n      this.authService.clearUserData();\n    }\n  }\n\n  private isProtectedRoute(url: string): boolean {\n    const protectedRoutes = ['/dashboard', '/user-list', '/user-create', '/user-edit', '/user-view', '/profile', '/change-password'];\n    return protectedRoutes.some(route => url.startsWith(route));\n  }\n\n  isLoggedIn(): boolean {\n    return this.authService.isLoggedIn();\n  }\n\n  isOnLandingPage(): boolean {\n    return this.router.url === '/';\n  }\n\n  logout(): void {\n    const userData = this.authService.getUserData();\n    if (userData) {\n      this.authService.logout(userData.username).subscribe({\n        next: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/']);\n        },\n        error: () => {\n          this.authService.clearUserData();\n          this.router.navigate(['/']);\n        }\n      });\n    } else {\n      this.authService.clearUserData();\n      this.router.navigate(['/']);\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}